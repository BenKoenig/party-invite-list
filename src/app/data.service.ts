import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import { v4 as uuidv4 } from 'uuid';

/**
 * DataService
 *
 * This service is responsible for managing the data in the application. It provides methods
 * to add, update, retrieve, and delete data items. The data is stored in an array, with each
 * item having a unique id generated by the uuidv4 function.
 *
 * The service uses a Subject to notify subscribers when the data changes. This allows components
 * to react to changes in the data, for example by updating the UI to reflect the new data.
 *
 * The service is provided in the root injector, which means that it's a singleton and the same
 * instance is used throughout the application. This ensures that all components that inject
 * this service are working with the same data.
 */

@Injectable({
  providedIn: 'root',
})
export class DataService {
  // Private array to store data, initialized with some default data
  private data: any[] = [
    // Each data entry contains an ID and some personal information
    {
      id: uuidv4(),
      firstName: 'John',
      lastName: 'Doe',
      phoneNumber: '+43312312312',
      arrivalTime: '10:00',
    },
    {
      id: uuidv4(),
      firstName: 'Jane',
      lastName: 'Doe',
      phoneNumber: '+43312312312',
      arrivalTime: '11:00',
    },
    {
      id: uuidv4(),
      firstName: 'Jason',
      lastName: 'Anderson',
      phoneNumber: '+43312312312',
      arrivalTime: '12:00',
    },
  ];

  // A Subject to emit events when the data is updated
  private dataUpdated = new Subject<any[]>();

  // Method to set data for a specific ID
  setData(id: number, newData: any) {
    this.data[id] = newData;
    this.dataUpdated.next([...this.data]); // Emitting updated data
  }

  // Method to add new data
  addData(newData: any) {
    this.data.push(newData);
    this.dataUpdated.next([...this.data]); // Emitting updated data
    console.log(this.data); // Logging the updated data array
  }

  // Method to get data by ID
  getData(id: number) {
    return this.data.find((item) => item.id === id);
  }

  // Method to update data for a specific ID, returns a promise
  updateData(id: number, newData: any): Promise<void> {
    return new Promise((resolve, reject) => {
      const index = this.data.findIndex((item) => item.id === id);
      if (index !== -1) {
        this.data[index] = newData;
        this.dataUpdated.next([...this.data]); // Emitting updated data
        resolve(); // Resolve the promise if update is successful
      } else {
        reject('No item found with the given id'); // Reject the promise if no item found
      }
    });
  }

  // Method to get all data
  getAllData() {
    return [...this.data]; // Returning a copy of the data array
  }

  // Method to get an observable for data update events
  getDataUpdateListener() {
    return this.dataUpdated.asObservable();
  }

  // Method to delete data for a specific ID
  deleteData(id: number) {
    const index = this.data.findIndex((item) => item.id === id);
    if (index !== -1) {
      this.data.splice(index, 1);
      this.dataUpdated.next([...this.data]); // Emitting updated data
    }
  }
}